{"version":3,"sources":["js/task_1.js","js/task_2.js","js/task_3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","reject","canProcess","logSuccess","id","logError","warn","amount","catch"],"mappings":"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","file":"src.5e4a4587.js","sourceRoot":"..\\src","sourcesContent":["\r\n\r\nconst delay = ms =>{\r\n    \r\n    return new Promise(resolve => {\r\n        \r\n        setTimeout(() => resolve(ms),ms);\r\n      });  \r\n   \r\n}\r\n\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n  delay(5000).then(logger);\r\n\r\n//   Напиши функцию delay(ms),\r\n//    которая возвращает промис,\r\n//     переходящий в состояние \"resolved\" через ms миллисекунд.\r\n//      Значением исполнившегося промиса\r\n//       должно быть то кол-во миллисекунд\r\n//        которое передали во время вызова функции delay.","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\n//  а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n\r\n  \r\n  const toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n  \r\n    return Promise.resolve(updatedUsers);\r\n  };\r\n  \r\n  const logger = updatedUsers => console.table(updatedUsers);\r\n  \r\n\r\n\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n ","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n\r\n  \r\n  const makeTransaction = (transaction, onSuccess, onError) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n            const canProcess = Math.random() > 0.3;\r\n        \r\n            setTimeout(() => {\r\n              if (canProcess) {\r\n                resolve(logSuccess({id: transaction.id, time: delay}));\r\n              }\r\n        \r\n              reject(logError(transaction.id));\r\n            }, delay);\r\n          });\r\n    }\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n  \r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);","\r\nimport \"./js/task_1\"\r\nimport \"./js/task_2\"\r\nimport \"./js/task_3\""]}