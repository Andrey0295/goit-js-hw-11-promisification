{"version":3,"sources":["js/task_1.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then"],"mappings":"AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAAC,EAAE,EAAG;AAEf,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAE1BC,IAAAA,UAAU,CAAC;AAAA,aAAMD,OAAO,CAACF,EAAD,CAAb;AAAA,KAAD,EAAmBA,EAAnB,CAAV;AACD,GAHI,CAAP;AAKH,CAPD;;AAUE,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAAC,IAAI;AAAA,SAAIC,OAAO,CAACC,GAAR,0BAA8BF,IAA9B,QAAJ;AAAA,CAAnB,EAEA;;;AACAN,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAA0B;;AAC1BL,KAAK,CAAC,IAAD,CAAL,CAAYS,IAAZ,CAAiBJ,MAAjB,GAEF;AACA;AACA;AACA;AACA;AACA","file":"task_1.ad7be9d9.js","sourceRoot":"..\\src","sourcesContent":["\r\n\r\nconst delay = ms =>{\r\n    \r\n    return new Promise(resolve => {\r\n        \r\n        setTimeout(() => resolve(ms),ms);\r\n      });  \r\n   \r\n}\r\n\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n  delay(5000).then(logger);\r\n\r\n//   Напиши функцию delay(ms),\r\n//    которая возвращает промис,\r\n//     переходящий в состояние \"resolved\" через ms миллисекунд.\r\n//      Значением исполнившегося промиса\r\n//       должно быть то кол-во миллисекунд\r\n//        которое передали во время вызова функции delay."]}