{"version":3,"sources":["js/task_1.js","js/task_2.js","js/task_3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","user","data","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","reject","canProcess","logSuccess","id","logError","warn","amount","catch"],"mappings":"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","file":"src.98557947.js","sourceRoot":"..\\src","sourcesContent":["\r\n\r\nconst delay = ms =>{\r\n    \r\n    return new Promise(resolve => {\r\n        \r\n        setTimeout(() => resolve(ms),ms);\r\n      });  \r\n   \r\n}\r\n\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n  \r\n  // Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n  delay(5000).then(logger);\r\n\r\n//   Напиши функцию delay(ms),\r\n//    которая возвращает промис,\r\n//     переходящий в состояние \"resolved\" через ms миллисекунд.\r\n//      Значением исполнившегося промиса\r\n//       должно быть то кол-во миллисекунд\r\n//        которое передали во время вызова функции delay.","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback,\r\n//  а принимала всего два параметра allUsers и userName и возвращала промис.\r\n\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n  ];\r\n  \r\n\r\n  const toggleUserState = (allUsers, userName) => {\r\n      return new Promise(resolve => {\r\n          for (const user of users){\r\n              if(user.name === userName){\r\n                  user.active = !user.active;\r\n              }\r\n            }\r\n            resolve(allUsers)\r\n      })\r\n      \r\n  }\r\n  const logger = data => console.table(data);\r\n\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  toggleUserState(users, 'Mango').then(logger);\r\n  toggleUserState(users, 'Lux').then(logger);\r\n ","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n\r\n  \r\n  const makeTransaction = (transaction, onSuccess, onError) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n            const canProcess = Math.random() > 0.3;\r\n        \r\n            setTimeout(() => {\r\n              if (canProcess) {\r\n                resolve(logSuccess({id: transaction.id, time: delay}));\r\n              }\r\n        \r\n              reject(logError(transaction.id));\r\n            }, delay);\r\n          });\r\n    }\r\n  \r\n  \r\n  \r\n\r\n\r\n\r\n  \r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n \r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);","\r\nimport \"./js/task_1\"\r\nimport \"./js/task_2\"\r\nimport \"./js/task_3\""]}